name: Pre-commit & Security Checks

on:
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  pre-commit:
    name: Pre-commit Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install Node.js dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Install pre-commit
      run: |
        pip install --upgrade pip
        pip install pre-commit==3.6.0
    
    - name: Cache pre-commit hooks
      uses: actions/cache@v3
      with:
        path: ~/.cache/pre-commit
        key: pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}-v2
        restore-keys: |
          pre-commit-
    
    - name: Install pre-commit hooks
      run: pre-commit install --install-hooks
    
    - name: Run pre-commit on changed files
      run: |
        # Get the list of changed files
        git fetch origin main:main
        
        # Run pre-commit on changed files only
        if git diff --name-only --diff-filter=ACM origin/main...HEAD | grep -E '\.(py|js|jsx|ts|tsx|json|css|scss|md|yaml|yml)$'; then
          pre-commit run --from-ref origin/main --to-ref HEAD --show-diff-on-failure
        else
          echo "No relevant files changed for pre-commit checks"
        fi

  detect-secrets:
    name: Detect Secrets
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install detect-secrets
      run: pip install detect-secrets
    
    - name: Create detect-secrets config
      run: |
        cat > .secrets.config << EOF
        {
          "version": "1.4.0",
          "plugins_used": [
            {
              "name": "ArtifactoryDetector"
            },
            {
              "name": "AWSKeyDetector"
            },
            {
              "name": "AzureStorageKeyDetector"
            },
            {
              "name": "Base64HighEntropyString",
              "limit": 4.5
            },
            {
              "name": "BasicAuthDetector"
            },
            {
              "name": "CloudantDetector"
            },
            {
              "name": "DiscordBotTokenDetector"
            },
            {
              "name": "GitHubTokenDetector"
            },
            {
              "name": "HexHighEntropyString",
              "limit": 3.0
            },
            {
              "name": "IbmCloudIamDetector"
            },
            {
              "name": "IbmCosHmacDetector"
            },
            {
              "name": "JwtTokenDetector"
            },
            {
              "name": "KeywordDetector",
              "keyword_exclude": ""
            },
            {
              "name": "MailchimpDetector"
            },
            {
              "name": "NpmDetector"
            },
            {
              "name": "PrivateKeyDetector"
            },
            {
              "name": "SendGridDetector"
            },
            {
              "name": "SlackDetector"
            },
            {
              "name": "SoftlayerDetector"
            },
            {
              "name": "SquareOAuthDetector"
            },
            {
              "name": "StripeDetector"
            },
            {
              "name": "TwilioKeyDetector"
            }
          ],
          "filters_used": [
            {
              "path": "detect_secrets.filters.allowlist.is_line_allowlisted"
            },
            {
              "path": "detect_secrets.filters.common.is_ignored_due_to_verification_policies",
              "min_level": 2
            },
            {
              "path": "detect_secrets.filters.heuristic.is_indirect_reference"
            },
            {
              "path": "detect_secrets.filters.heuristic.is_likely_id_string"
            },
            {
              "path": "detect_secrets.filters.heuristic.is_lock_file"
            },
            {
              "path": "detect_secrets.filters.heuristic.is_not_alphanumeric_string"
            },
            {
              "path": "detect_secrets.filters.heuristic.is_potential_uuid"
            },
            {
              "path": "detect_secrets.filters.heuristic.is_prefixed_with_dollar_sign"
            },
            {
              "path": "detect_secrets.filters.heuristic.is_sequential_string"
            },
            {
              "path": "detect_secrets.filters.heuristic.is_swagger_file"
            },
            {
              "path": "detect_secrets.filters.heuristic.is_templated_secret"
            }
          ],
          "exclude": {
            "files": "node_modules/.*|.git/.*|\\.secrets\\..*",
            "lines": null
          }
        }
        EOF
    
    - name: Run detect-secrets scan
      run: |
        # Run initial scan to create baseline
        detect-secrets scan \
          --all-files \
          --baseline .secrets.baseline \
          --exclude-files 'node_modules/.*' \
          --exclude-files '.git/.*' \
          --exclude-files '.*\\.pyc' \
          --exclude-files '.*\\.log' \
          --exclude-files 'package-lock\\.json' \
          --exclude-files 'yarn\\.lock' \
          --exclude-lines 'password.*=.*\\*\\*\\*' \
          --exclude-lines 'DATABASE_URL.*=.*\\*\\*\\*'
    
    - name: Check for new secrets
      if: github.event_name == 'pull_request'
      run: |
        # Check if there are any unverified secrets
        if [ -f .secrets.baseline ]; then
          # Count secrets in baseline
          secret_count=$(python3 -c "
        import json
        try:
            with open('.secrets.baseline', 'r') as f:
                data = json.load(f)
            print(len(data.get('results', {})))
        except:
            print(0)
        ")
          
          echo "Found $secret_count potential secrets"
          
          if [ "$secret_count" -gt 0 ]; then
            echo "⚠️  Potential secrets detected! Review the baseline file:"
            echo ""
            python3 -c "
        import json
        try:
            with open('.secrets.baseline', 'r') as f:
                data = json.load(f)
            for filename, secrets in data.get('results', {}).items():
                print(f'📄 {filename}:')
                for secret in secrets:
                    print(f'  - Line {secret.get(\"line_number\", \"?\")}: {secret.get(\"type\", \"Unknown\")}')
                print()
        except Exception as e:
            print(f'Error reading baseline: {e}')
        "
            
            echo ""
            echo "If these are false positives, they need to be verified manually."
            echo "Consider adding them to .gitignore or using # pragma: allowlist secret comments."
            
            # Don't fail the workflow for now, just warn
            echo "⚠️  Warning: Potential secrets found - please review!"
          else
            echo "✅ No secrets detected"
          fi
        else
          echo "✅ No secrets baseline created - no potential secrets found"
        fi
    
    - name: Upload secrets baseline
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: secrets-baseline
        path: |
          .secrets.baseline
          .secrets.config
