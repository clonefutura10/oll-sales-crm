name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
          POSTGRES_USER: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    strategy:
      matrix:
        python-version: ['3.11']
        node-version: ['18']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for better caching
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        cache-dependency-path: 'backend/requirements.txt'
    
    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install Python dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 black pylint pytest coverage safety
    
    - name: Install Node.js dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Code formatting check (Python)
      run: |
        cd backend
        black --check . --diff
    
    - name: Lint Python code
      run: |
        cd backend
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Lint TypeScript/JavaScript code
      run: |
        cd frontend
        npm run lint
    
    - name: Type check TypeScript
      run: |
        cd frontend
        npx tsc --noEmit
    
    - name: Security check (Python dependencies)
      run: |
        cd backend
        safety check --json --output safety-report.json || true
      continue-on-error: true
    
    - name: Security audit (Node dependencies)
      run: |
        cd frontend
        npm audit --audit-level=moderate --json > audit-report.json || true
      continue-on-error: true
    
    - name: Run Python tests
      run: |
        cd backend
        coverage run --source='.' manage.py test
        coverage report
        coverage xml
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key
        DEBUG: True
    
    - name: Run Node.js tests
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false --passWithNoTests
      env:
        CI: true
    
    - name: Upload Python coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage
        fail_ci_if_error: false
    
    - name: Upload Node.js coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage
        fail_ci_if_error: false
    
    - name: Archive test artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-reports
        path: |
          backend/coverage.xml
          frontend/coverage/
          backend/safety-report.json
          frontend/audit-report.json

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    permissions:
      contents: read
      packages: write
      security-events: write
    
    strategy:
      matrix:
        service: [backend, frontend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
        labels: |
          org.opencontainers.image.title=OLL CRM ${{ matrix.service }}
          org.opencontainers.image.description=OLL Sales CRM ${{ matrix.service }} application
          org.opencontainers.image.vendor=Clone Futura
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./${{ matrix.service }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          BUILD_DATE=${{ github.event.head_commit.timestamp }}
          VCS_REF=${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results-${{ matrix.service }}.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results-${{ matrix.service }}.sarif'

  integration-tests:
    needs: [test, build-and-push]
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Create test environment file
      run: |
        cat > .env.test << EOF
        DEBUG=True
        SECRET_KEY=test-secret-key-for-integration
        DATABASE_URL=postgresql://postgres:postgres@db:5432/oll_crm_test
        REDIS_URL=redis://redis:6379/0
        ALLOWED_HOSTS=localhost,127.0.0.1,backend
        CORS_ALLOWED_ORIGINS=http://localhost:3000
        EOF
    
    - name: Create test docker-compose file
      run: |
        cat > docker-compose.test.yml << EOF
        version: '3.8'
        services:
          db:
            image: postgres:15
            environment:
              POSTGRES_DB: oll_crm_test
              POSTGRES_USER: postgres
              POSTGRES_PASSWORD: postgres
            healthcheck:
              test: ["CMD-SHELL", "pg_isready -U postgres"]
              interval: 5s
              timeout: 5s
              retries: 5
          
          redis:
            image: redis:7-alpine
            healthcheck:
              test: ["CMD", "redis-cli", "ping"]
              interval: 5s
              timeout: 5s
              retries: 5
          
          backend:
            image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.sha }}
            environment:
              - DATABASE_URL=postgresql://postgres:postgres@db:5432/oll_crm_test
              - REDIS_URL=redis://redis:6379/0
              - DEBUG=True
              - SECRET_KEY=test-secret-key-for-integration
            depends_on:
              db:
                condition: service_healthy
              redis:
                condition: service_healthy
            command: >
              sh -c "python manage.py migrate &&
                     python manage.py runserver 0.0.0.0:8000"
          
          frontend:
            image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.sha }}
            environment:
              - NEXT_PUBLIC_API_URL=http://backend:8000
            depends_on:
              - backend
        EOF
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Run integration tests
      run: |
        # Start the test environment
        docker-compose -f docker-compose.test.yml up -d
        
        # Wait for services to be ready
        echo "Waiting for services to be ready..."
        sleep 60
        
        # Check if services are healthy
        docker-compose -f docker-compose.test.yml ps
        
        # Run basic health checks
        docker-compose -f docker-compose.test.yml exec -T backend python manage.py check
        
        # Run integration tests if they exist
        docker-compose -f docker-compose.test.yml exec -T backend python manage.py test tests.integration || echo "No integration tests found"
        
        # Test API endpoints
        docker run --rm --network="$(docker-compose -f docker-compose.test.yml ps -q | head -1 | xargs docker inspect --format='{{range .NetworkSettings.Networks}}{{.NetworkID}}{{end}}')" \
          curlimages/curl:latest \
          curl -f http://backend:8000/ || echo "API health check failed"
    
    - name: Cleanup test environment
      if: always()
      run: |
        docker-compose -f docker-compose.test.yml down -v
        docker system prune -f

  deploy-staging:
    needs: [integration-tests]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    
    environment:
      name: staging
      url: https://staging.oll-crm.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        echo "Image tag: ${{ github.sha }}"
        # Add your staging deployment commands here
        # This could be kubectl, helm, AWS ECS, etc.
    
    - name: Run smoke tests on staging
      run: |
        echo "Running smoke tests on staging..."
        # Add smoke tests here
        curl -f https://staging.oll-crm.com/health/ || exit 1
    
    - name: Notify deployment
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
        text: 'Staging deployment completed for OLL CRM'

  deploy-production:
    needs: [integration-tests]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    environment:
      name: production
      url: https://oll-crm.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        echo "Image tag: ${{ github.sha }}"
        # Add your production deployment commands here
        # This could be kubectl, helm, AWS ECS, etc.
    
    - name: Run smoke tests on production
      run: |
        echo "Running smoke tests on production..."
        # Add comprehensive smoke tests here
        curl -f https://oll-crm.com/health/ || exit 1
    
    - name: Create GitHub release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          ## Changes in this Release
          - Automated release from commit ${{ github.sha }}
          - Docker images: 
            - Backend: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.sha }}
            - Frontend: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.sha }}
        draft: false
        prerelease: false
    
    - name: Notify successful deployment
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: 'success'
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
        text: '🚀 Production deployment successful for OLL CRM v${{ github.run_number }}'
    
    - name: Notify failed deployment
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: 'failure'
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
        text: '❌ Production deployment failed for OLL CRM'
