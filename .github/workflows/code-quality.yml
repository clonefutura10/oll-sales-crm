name: Code Quality - Linting

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  python-linting:
    name: Python Linting & Code Quality
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        cache-dependency-path: 'backend/requirements.txt'
    
    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 black isort pylint bandit mypy safety
    
    - name: Run Black (code formatting check)
      run: |
        cd backend
        black --check --diff --color .
    
    - name: Run isort (import sorting check)
      run: |
        cd backend
        isort --check-only --diff --color .
    
    - name: Run Flake8 (style guide enforcement)
      run: |
        cd backend
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Run Pylint (code analysis)
      run: |
        cd backend
        pylint --output-format=colorized --reports=y **/*.py || true
    
    - name: Run Bandit (security linting)
      run: |
        cd backend
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . --severity-level medium
    
    - name: Run MyPy (type checking)
      run: |
        cd backend
        mypy . --ignore-missing-imports --show-error-codes || true
    
    - name: Run Safety (dependency vulnerability check)
      run: |
        cd backend
        safety check --json --output safety-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: python-security-reports-${{ matrix.python-version }}
        path: |
          backend/bandit-report.json
          backend/safety-report.json

  javascript-linting:
    name: JavaScript/TypeScript Linting & Code Quality
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: ['18', '20']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
        npm install --save-dev \
          prettier \
          @typescript-eslint/eslint-plugin \
          @typescript-eslint/parser \
          eslint-config-prettier \
          eslint-plugin-prettier \
          eslint-plugin-react \
          eslint-plugin-react-hooks \
          eslint-plugin-import \
          eslint-plugin-jsx-a11y
    
    - name: Run ESLint
      run: |
        cd frontend
        npx eslint . --ext .js,.jsx,.ts,.tsx --format=stylish --max-warnings=0
    
    - name: Run Prettier (formatting check)
      run: |
        cd frontend
        npx prettier --check "**/*.{js,jsx,ts,tsx,json,css,md}"
    
    - name: Run TypeScript compiler check
      run: |
        cd frontend
        npx tsc --noEmit --pretty
    
    - name: Run Next.js lint
      run: |
        cd frontend
        npm run lint
    
    - name: Check for unused dependencies
      run: |
        cd frontend
        npx depcheck --ignores="@types/*,eslint-*" || true
    
    - name: Security audit
      run: |
        cd frontend
        npm audit --audit-level=moderate --json > npm-audit-report.json || true
        npm audit --audit-level=moderate
    
    - name: Upload audit report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: npm-audit-report-${{ matrix.node-version }}
        path: frontend/npm-audit-report.json

  dockerfile-linting:
    name: Dockerfile Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Hadolint (Dockerfile linter)
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: backend/Dockerfile
        format: sarif
        output-file: hadolint-backend.sarif
        no-fail: true
    
    - name: Run Hadolint for Frontend Dockerfile
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: frontend/Dockerfile
        format: sarif
        output-file: hadolint-frontend.sarif
        no-fail: true
    
    - name: Upload Hadolint results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: hadolint-backend.sarif
    
    - name: Upload Frontend Hadolint results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: hadolint-frontend.sarif

  yaml-linting:
    name: YAML/Config Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install yamllint
      run: pip install yamllint
    
    - name: Run yamllint
      run: |
        yamllint --format github .github/
        yamllint --format github docker-compose*.yml
        yamllint --format github .pre-commit-config.yaml
    
    - name: Validate docker-compose files
      run: |
        docker-compose -f docker-compose.yml config --quiet

  markdown-linting:
    name: Markdown Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install markdownlint
      run: npm install -g markdownlint-cli
    
    - name: Run markdownlint
      run: |
        markdownlint "**/*.md" --ignore node_modules --ignore .next
    
    - name: Check for broken links
      uses: gaurav-nelson/github-action-markdown-link-check@v1
      with:
        use-quiet-mode: 'yes'
        use-verbose-mode: 'yes'
        config-file: '.github/mlc_config.json'
        folder-path: '.'
        file-extension: '.md'

  code-quality-summary:
    name: Code Quality Summary
    runs-on: ubuntu-latest
    needs: [python-linting, javascript-linting, dockerfile-linting, yaml-linting, markdown-linting]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
    
    - name: Generate code quality report
      run: |
        echo "# Code Quality Report" > code-quality-report.md
        echo "" >> code-quality-report.md
        echo "## Summary" >> code-quality-report.md
        echo "- Python Linting: ${{ needs.python-linting.result }}" >> code-quality-report.md
        echo "- JavaScript/TypeScript Linting: ${{ needs.javascript-linting.result }}" >> code-quality-report.md
        echo "- Dockerfile Linting: ${{ needs.dockerfile-linting.result }}" >> code-quality-report.md
        echo "- YAML Linting: ${{ needs.yaml-linting.result }}" >> code-quality-report.md
        echo "- Markdown Linting: ${{ needs.markdown-linting.result }}" >> code-quality-report.md
        echo "" >> code-quality-report.md
        echo "Generated on: $(date)" >> code-quality-report.md
    
    - name: Upload code quality report
      uses: actions/upload-artifact@v4
      with:
        name: code-quality-report
        path: code-quality-report.md
    
    - name: Comment PR with results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('code-quality-report.md', 'utf8');
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: report
          });
